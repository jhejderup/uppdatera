org.opalj {

	analysisMode = "desktop application"
	//analysisMode = "JEE6 web application"
	//analysisMode = "library with open packages assumption"
	//analysisMode = "library with closed packages assumption"

  br {
    reader {
      ClassFileReader {
        BytecodeOptimizer {
            simplifyControlFlow = true, // default is "true"
            logControlFlowSimplification = false // default is "false"
        },
        Java8LambdaExpressions {
          rewrite = true, // default is "true"
          logRewrites = false // default is "false"
          logUnknownInvokeDynamics = false // default is "false"
        },
        deleteSynthesizedClassFilesAttributes = true // default is "true"
      }
    }

    analyses {

      PropertyStoreKey {
        debug = false // default is "false"
      }

      ClosedPackagesKey {
        analysis = "org.opalj.br.analyses.ClosedPackagesConfiguration"
        closedPackages = "java(/.*)*"
        openPackages = ".*"
      }

      DirectTypeExtensibilityKey {
        analysis = "org.opalj.br.analyses.ConfigureFinalTypes"
        finalTypes = ["java/lang/Object", "java/util/List"] # used by org.opalj.br.analyses.ConfigureFinalTypes
      }
    }
  }

  fpcf {

    registry {
      analyses.br = [
        {
          id = "MethodAccessibilityAnalysis",
          description = "Computes the project accessibility property of methods w.r.t. clients.",
          factory = "org.opalj.fpcf.analyses.MethodAccessibilityAnalysis"
        },
        {
          id = "FactoryMethodAnalysis",
          description = "Determines if a static method is an accessible factory method w.r.t. clients.",
          factory = "org.opalj.fpcf.analyses.FactoryMethodAnalysis"
        },
        {
          id = "InstantiabilityAnalysis",
          description = "Computes if a class can (possibly) be instantiated.",
          factory = "org.opalj.fpcf.analyses.SimpleInstantiabilityAnalysis"
        },
        {
          id = "CallableFromClassesInOtherPackagesAnalysis",
          description = "Computes whether a non-static method can be called via an super or subclass.",
          factory = "org.opalj.fpcf.analyses.CallableFromClassesInOtherPackagesAnalysis"
        },
        {
          id = "FieldMutabilityAnalysis",
          description = "Determines if fields are (effectively) final.",
          factory = "org.opalj.fpcf.analyses.FieldMutabilityAnalysis"
        },
        {
          id = "PurityAnalysis",
          description = "Determines if a method is pure (~ has no side effects).",
          factory = "org.opalj.fpcf.analyses.PurityAnalysis"
        },
        {
          id = "ClassExtensibilityAnalysis",
          description = "Determines which classes may have subclasses (this analysis is particularly relevant when analyzing libraries)",
          factory = "org.opalj.fpcf.analyses.ClassExtensibilityAnalysis"
        }
      ]
    }

    analysis {
      manager {
        debug = true // default is "false"
      }

      escape {
        debug = true // default is "false"
      }
    }
  }
}
